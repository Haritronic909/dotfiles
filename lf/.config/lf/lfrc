#quit to current directory
push m-
map Q push '-q

map DD delete
map zd calcdirsize

set shell zsh
set shellopts '-euy'
set ifs "\n"
set filesep "\n"  # default already


set hidden true
set drawbox true
set mouse true
#set icons true

set preview true
set previewer ctpv #Requires ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

#change default mappings
map t #remove tag option for using trash
map b tag-toggle

set incsearch true 
set incfilter true 
set smartcase 
set ratios '1:2:3'

set scrolloff 10


# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/* | application/json) $EDITOR $fx;;
        application/pdf) zathura $fx ;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# mkdir shortcut
cmd mkdir %mkdir "$@"
map a push :mkdir<space>



# Trash commands(requires trash-cli)
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}
cmd clear_trash %trash-empty
cmd restore_trash ${{
  trash-restore
}}
# Trash mappings
map tt trash
map tc clear_trash
map tr restore_trash

# Git commands
cmd git-pull ${{clear; git pull || true; echo "press ENTER"; read ENTER}}
cmd git-status ${{clear; git status; echo "press ENTER"; read ENTER}}
cmd git-log ${{clear; git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit}}
# Git mappings
map gp git-pull
map gs git-status
map gl git-log

